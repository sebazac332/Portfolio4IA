{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Agente baseado em conhecimento","text":"<p>Os agentes baseados em conhecimento s\u00e3o aqueles que t\u00eam a capacidade de manter um estado interno de conhecimento, raciocinar sobre esse conhecimento, atualizar seu conhecimento ap\u00f3s observa\u00e7\u00f5es e realizar a\u00e7\u00f5es. Esses agentes podem representar o mundo com alguma representa\u00e7\u00e3o formal e agir de forma inteligente. [2]</p> <p>Um agente baseado no conhecimento deve ser capaz de realizar as seguintes a\u00e7\u00f5es:</p> <ul> <li>Um agente deve ser capaz de representar estados, a\u00e7\u00f5es, etc. [2]</li> <li>Um agente deve ser capaz de incorporar novas percep\u00e7\u00f5es. [2]</li> <li>Um agente pode atualizar a representa\u00e7\u00e3o interna do mundo. [2]</li> <li>Um agente pode deduzir a representa\u00e7\u00e3o interna do mundo. [2]</li> <li>Um agente pode deduzir a\u00e7\u00f5es apropriadas. [2]</li> </ul>"},{"location":"#base-de-conhecimento","title":"Base de conhecimento","text":"<p>O componente central desse agente \u00e9 a base de conhecimento, que \u00e9 composta por frases, que \u00e9 uma afirma\u00e7\u00e3o do mundo real representada usando linguagem de representa\u00e7\u00e3o do conhecimento. Uma frase que n\u00e3o \u00e9 derivada de outras frases \u00e9 conhecida como axioma. Para obter novas frases, usa-se um processo chamado infer\u00eancia, no qual frases j\u00e1 estabelecidas s\u00e3o usadas para gerar novas frases. A base de conhecimento tamb\u00e9m cont\u00e9m um conjunto de frases iniciais, estes s\u00e3o chamados de conhecimentos pr\u00e9vios. [1]</p>"},{"location":"#sistema-de-inferencia","title":"Sistema de infer\u00eancia","text":"<p>Ele \u00e9 usado quando voc\u00ea quer atualizar informa\u00e7\u00f5es em um sistema baseado no conhecimento e tamb\u00e9m para conhecer a informa\u00e7\u00e3o que j\u00e1 tem. Este mecanismo \u00e9 realizado atrav\u00e9s das opera\u00e7\u00f5es TELL e ASK. [3]</p> <p>A\u00e7\u00f5es realizadas:</p> <ol> <li>Ele DIZ (TELLS) o que reconheceu do ambiente e o que precisa saber para a base de conhecimento. [3]</li> <li>Ele PERGUNTA (ASKS) quais a\u00e7\u00f5es fazer e obt\u00e9m respostas da base de conhecimento. [3]</li> <li>Ele DIZ (TELLS) \u00e0 base de conhecimento qual a\u00e7\u00e3o foi selecionada e, em seguida, o agente executa essa a\u00e7\u00e3o. [3]</li> </ol>"},{"location":"#exemplo-de-agente-baseado-em-conhecimento","title":"Exemplo de agente baseado em conhecimento","text":"<pre><code>\nfunction KB-AGENT(percept):  \npersistent: KB, a knowledge base   \n          t, a counter, initially 0, indicating time   \nTELL(KB, MAKE-PERCEPT-SENTENCE(percept, t))   \nAction = ASK(KB, MAKE-ACTION-QUERY(t))   \nTELL(KB, MAKE-ACTION-SENTENCE(action, t))  \n t = t + 1  \n return action\n\n</code></pre> <p>O MAKE-PERCEPT-SENTENCE gera uma frase que define que o agente percebeu a percep\u00e7\u00e3o em quest\u00e3o em um determinado momento. [2]</p> <p>O MAKE-ACTION-QUERY gera uma senten\u00e7a para perguntar qual a\u00e7\u00e3o deve ser executada no momento atual. [2]</p> <p>O MAKE-ACTION-SENTENCE gera uma frase que afirma que a a\u00e7\u00e3o escolhida foi executada. [2]</p>"},{"location":"#niveis-de-agentes-baseados-em-conhecimento","title":"N\u00edveis de agentes baseados em conhecimento","text":""},{"location":"#nivel-de-conhecimento","title":"N\u00edvel de conhecimento","text":"<p>O n\u00edvel de conhecimento \u00e9 o primeiro n\u00edvel do agente baseado em conhecimento e, nesse n\u00edvel, precisamos especificar o que o agente sabe e quais s\u00e3o os objetivos do agente. Com essas especifica\u00e7\u00f5es, podemos fixar seu comportamento. Por exemplo, suponha que um agente de t\u00e1xi automatizado precise ir de uma esta\u00e7\u00e3o A para a esta\u00e7\u00e3o B e que ele saiba o caminho de A para B, portanto, isso est\u00e1 no n\u00edvel de conhecimento. [2]</p>"},{"location":"#nivel-logico","title":"N\u00edvel l\u00f3gico:","text":"<p>Nesse n\u00edvel, entendemos como a representa\u00e7\u00e3o do conhecimento \u00e9 armazenada. Nesse n\u00edvel, as senten\u00e7as s\u00e3o codificadas em diferentes l\u00f3gicas. No n\u00edvel l\u00f3gico, ocorre uma codifica\u00e7\u00e3o do conhecimento em senten\u00e7as l\u00f3gicas. No n\u00edvel l\u00f3gico, podemos esperar que o agente de t\u00e1xi automatizado chegue ao destino B. [2]</p>"},{"location":"#nivel-de-implementacao","title":"N\u00edvel de implementa\u00e7\u00e3o:","text":"<p>Essa \u00e9 a representa\u00e7\u00e3o f\u00edsica da l\u00f3gica e do conhecimento. No n\u00edvel de implementa\u00e7\u00e3o, o agente executa a\u00e7\u00f5es de acordo com o n\u00edvel l\u00f3gico e de conhecimento. Nesse n\u00edvel, um agente de t\u00e1xi automatizado realmente implementa seu conhecimento e l\u00f3gica para que possa chegar ao destino. [2]</p>"},{"location":"#abordagens-de-agentes-baseados-em-conhecimento","title":"Abordagens de agentes baseados em conhecimento","text":"<p>Abordagem declarativa: Nesse caso, partindo de uma base de conhecimento vazia, o agente pode DIZER frases uma ap\u00f3s a outra at\u00e9 que tenha conhecimento de como trabalhar com seu ambiente. Isso \u00e9 conhecido como abordagem declarativa. Ela armazena as informa\u00e7\u00f5es necess\u00e1rias em um sistema vazio baseado em conhecimento. [3]</p> <p>Abordagem processual: Converte os comportamentos necess\u00e1rios diretamente em c\u00f3digo de programa em um sistema vazio baseado em conhecimento. \u00c9 uma abordagem de contraste quando comparada \u00e0 abordagem declarativa. Nela, o comportamento de codifica\u00e7\u00e3o do sistema \u00e9 projetado. [3]</p>"},{"location":"inference_process/","title":"Processo de infer\u00eancia","text":"<p>Aqui olhamos como a vincula\u00e7\u00e3o pode ser feita por meio da comprova\u00e7\u00e3o de teoremas, aplicando regras de infer\u00eancia diretamente \u00e0s senten\u00e7as em nossa base de conhecimento para construir uma prova da senten\u00e7a desejada sem consultar modelos. Se o n\u00famero de modelos for grande, mas o comprimento da prova for pequeno, a prova de teoremas pode ser mais eficiente do que a verifica\u00e7\u00e3o de modelos.  [1]</p> <p>Conceitos de fundo:</p> <ul> <li> <p>Equival\u00eancia l\u00f3gica: Duas frases A e B s\u00e3o logicamente equivalentes se forem verdadeiras nos mesmos modelos. Em outras palavras, quaisquer duas senten\u00e7as a e b s\u00e3o equivalentes se e somente se cada uma delas implicar a outra. [1]</p> </li> <li> <p>Validade: Uma frase \u00e9 v\u00e1lida se for verdadeira em todos os modelos. Essas frases tamb\u00e9m s\u00e3o conhecidas como tautologias, elas s\u00e3o necessariamente verdadeiras. [1]</p> </li> <li> <p>Satisfatoriedade: Uma frase \u00e9 satisfat\u00f3ria se for verdadeira em algum modelo ou for satisfeita por ele. A satisfatoriedade pode ser verificada enumerando os modelos poss\u00edveis at\u00e9 encontrar um que satisfa\u00e7a a frase. [1]</p> </li> </ul>"},{"location":"inference_process/#inferencia-e-provas","title":"Infer\u00eancia e provas","text":"<p>Esta se\u00e7\u00e3o aborda as regras de infer\u00eancia que podem ser aplicadas para derivar uma prova</p> <ul> <li> <p>Modus Ponens: Se uma declara\u00e7\u00e3o condicional (declara\u00e7\u00e3o \u201cif-then\u201d) for verdadeira e seu antecedente (a parte \u201cif\u201d) for verdadeiro, ent\u00e3o seu consequente (a parte \u201cthen\u201d) tamb\u00e9m dever\u00e1 ser verdadeiro. [4]</p> </li> <li> <p>And-Elimination: Regra que diz que, a partir de uma conjun\u00e7\u00e3o, qualquer um dos conjuntos pode ser deduzido. [1] Em outras palavras, se uma conjun\u00e7\u00e3o (uma declara\u00e7\u00e3o \u201cand\u201d) for verdadeira, ent\u00e3o cada um de seus conjuntos tamb\u00e9m ser\u00e1 verdadeiro. [4]</p> </li> <li> <p>Elimina\u00e7\u00e3o bicondicional: A elimina\u00e7\u00e3o bicondicional nos permite deduzir uma implica\u00e7\u00e3o e seu inverso de uma bicondicional. [5] Em outras palavras, se voc\u00ea sabe que P &lt;=&gt; Q, pode concluir P =&gt; Q. Da mesma forma, pode concluir Q =&gt; P. [6]</p> </li> <li> <p>Equival\u00eancia l\u00f3gica para contrapositivos:  A afirma\u00e7\u00e3o condicional e sua contrapositiva s\u00e3o logicamente equivalentes: p =&gt; q &lt;=&gt; \u223cq =&gt; \u223cp. Em outras palavras, a afirma\u00e7\u00e3o original e a contrapositiva devem concordar uma com a outra. Ambas devem ser verdadeiras, ou ambas devem ser falsas. [7]</p> </li> <li> <p>Regra de De Morgan: A lei de De Morgan \u00e9 a lei que fornece a rela\u00e7\u00e3o entre E, OU ou nega\u00e7\u00e3o da declara\u00e7\u00e3o. Representando a regra de De Morgan este \u00e9 assim \u223c (a \u2227 b) \u2261 \u223c a \u2228 \u223c b e \u223c (a \u2228 b) \u2261 \u223c a \u2227 \u223c b. [8]</p> </li> </ul>"},{"location":"logic/","title":"L\u00f3gica","text":"<p>Nesta parte veremos os conceitos fundamentais da representa\u00e7\u00e3o l\u00f3gica e do racionciio, que se aplicam independentemente de qualquer forma l\u00f3gica em particular. [1]</p> <p>Syntax: \u00c9 a estrutura que segue a linguagem de representa\u00e7\u00e3o l\u00f3gica quando se trata de representar uma frase. Por exemplo, na aritm\u00e9tica, a sintaxe define que uma representa\u00e7\u00e3o correta de uma frase \u00e9 x + y = 4 enquanto que uma representa\u00e7\u00e3o incorreta seria x4y +=. [1]</p> <p>Semanticas: Tamb\u00e9m conhecido como o significado de uma frase, \u00e9 uma verdade de cada frase em rela\u00e7\u00e3o a um mundo espec\u00edfico poss\u00edvel. Por exemplo, a frase acima apresentada x + y = 4 \u00e9 verdadeira em um mundo poss\u00edvel onde x \u00e9 2 e y \u00e9 2, mas essa mesma frase \u00e9 falsa em um mundo poss\u00edvel onde x \u00e9 1 e y \u00e9 1. [1]</p> <p>Modelo: S\u00e3o abstra\u00e7\u00f5es matem\u00e1ticas de ambientes reais potenciais em que o agente pode ser encontrado (mundos poss\u00edveis). Eles atribuem valores \u00e0s vari\u00e1veis relevantes e t\u00eam um valor fixo (verdadeiro e falso) para cada frase especificada. Por exemplo, na frase anterior x + y = 4 os modelos poss\u00edveis s\u00e3o atribui\u00e7\u00f5es de valores inteiros n\u00e3o negativos para as vari\u00e1veis x e y. [1]</p> <p>Satisfa\u00e7\u00e3o: Ocorre quando uma frase \"a\" \u00e9 verdadeira quando est\u00e1 em um modelo \"M\". Quando isso acontece, pode-se dizer que \"M\" satisfaz a a ou que \"M\" \u00e9 um modelo de \"a\". O conjunto de modelos que satisfazem a frase \"a\" \u00e9 representado usando a nota\u00e7\u00e3o M(a). [1]</p> <p>Implica\u00e7\u00e3o: \u00c9 a ideia de que uma frase segue logicamente de outra frase. Isto \u00e9, assumindo que se tem duas frases a e b, em qualquer modelo em que a \u00e9 verdade b tamb\u00e9m ser\u00e1 verdade. Um exemplo de uma liga\u00e7\u00e3o s\u00e9ria que a frase x = 0 verdadeira implica que a frase xy = 0 tamb\u00e9m \u00e9 verdadeira. A nota\u00e7\u00e3o |= \u00e9 usada para representar uma implica\u00e7\u00e3o, cuando A implica B se representa A |= B. [1]</p>"},{"location":"logic/#propriedades-de-algoritmos","title":"Propriedades de algoritmos","text":"<p>Aqui s\u00e3o apresentadas propriedades de algoritmos baseados em conhecimento que s\u00e3o muito desejadas.</p> <p>Preserva\u00e7\u00e3o da verdade: Tamb\u00e9m conhecido como solidez, \u00e9 quando todas as conclus\u00f5es derivadas s\u00e3o devido a que seguem logicamente da base de conhecimento. Um processo de infer\u00eancia que n\u00e3o \u00e9 s\u00f3lido basicamente inventa coisas durante a execu\u00e7\u00e3o. [1]</p> <p>Completude: \u00c9 quando um algoritmo \u00e9 capaz de derivar todas as frases que seguem logicamente a base de conhecimento. Quando se aplica algoritmos a espa\u00e7os infinitos esta propriedade representa um problema bastante grande. [1]</p> <p>Aterramento: \u00c9 a conex\u00e3o entre os processos de racioc\u00ednio l\u00f3gico e o ambiente real em que o agente existe. Como se sabe que a base de conhecimento \u00e9 verdadeira no mundo real? A resposta mais simples \u00e9 que os sensores do agente fazem essa conex\u00e3o. [1]</p>"},{"location":"propositional_agent/","title":"Agente baseado em l\u00f3gica proposicional","text":"<p>Para criar um agente com base na l\u00f3gica proposicional, a primeira etapa \u00e9 permitir que o agente deduza o estado do mundo a partir de seu hist\u00f3rico de percep\u00e7\u00f5es, na medida do poss\u00edvel. Isso exige a cria\u00e7\u00e3o de um modelo l\u00f3gico completo das consequ\u00eancias das a\u00e7\u00f5es. Tamb\u00e9m precisamos que o agente mantenha o controle do mundo sem ter de retornar ao hist\u00f3rico de percep\u00e7\u00f5es para cada infer\u00eancia. Por fim, garantimos que o agente desenvolva planos que garantam o cumprimento de seus objetivos usando infer\u00eancia l\u00f3gica. [9]</p>"},{"location":"propositional_agent/#conceitos-a-serem-considerados","title":"Conceitos a serem considerados","text":"<ul> <li>Fluente: Tamb\u00e9m conhecida como vari\u00e1vel de estado, refere-se a uma vari\u00e1vel ou aspecto do mundo que muda com o tempo. [1]</li> <li>Vari\u00e1veis atemporais: S\u00edmbolos associados com aspectos permanentes do mundo. [1]</li> <li>Modelo de transi\u00e7\u00e3o: No caso de agentes baseados em l\u00f3gica proposicional, o modelo de transi\u00e7\u00e3o (que mostra a quais estados levam certas a\u00e7\u00f5es) deve ser representado como um conjunto de senten\u00e7as l\u00f3gicas. Este \u00e9 composto por: [1]<ul> <li>Axiomas de efeito: Especifica o resultado futuro de uma a\u00e7\u00e3o espec\u00edfica. [1]</li> <li>Axiomas de quadro: Explicitamente afirmam todas as proposi\u00e7\u00f5es que permanecem iguais. [1]</li> <li>Axioma do estado sucessor: S\u00e3o usados para saber como o estado de um fluente muda em resposta a uma a\u00e7\u00e3o. [1]</li> <li>Axiomas de pr\u00e9-condi\u00e7\u00e3o: Especifica quais condi\u00e7\u00f5es devem ser cumpridas para que uma a\u00e7\u00e3o espec\u00edfica possa ser executada com sucesso. [1]</li> <li>Axiomas de exclus\u00e3o de a\u00e7\u00e3o: Especifica que a\u00e7\u00f5es n\u00e3o podem ser executadas ao mesmo tempo. Ou seja, enquanto a a\u00e7\u00e3o A \u00e9 executada, a a\u00e7\u00e3o B n\u00e3o pode ser executada e vice-versa. [1]</li> </ul> </li> <li>Localidade: Propriedade em que as a\u00e7\u00f5es afetam apenas um pequeno n\u00famero k de fluentes. [1]</li> <li>Estado de cren\u00e7a: Representa\u00e7\u00e3o do conjunto de todos os poss\u00edveis estados atuais do mundo. [1]</li> <li>Estimativa de estado: O processo de atualiza\u00e7\u00e3o do estado da cren\u00e7a \u00e0 medida que surgem novas percep\u00e7\u00f5es. [1]</li> <li>Aproxima\u00e7\u00e3o conservadora: Simplifica\u00e7\u00f5es feitas em situa\u00e7\u00f5es complexas que asseguram exatid\u00e3o ao custo de completude e precis\u00e3o. [1]</li> </ul>"},{"location":"propositional_agent/#problemas-encontrados","title":"Problemas encontrados","text":"<ul> <li>Problema de quadro: Ocorre porque, embora os axiomas de efeito registrem as mudan\u00e7as que ocorrem ao realizar uma a\u00e7\u00e3o, estes n\u00e3o registram as coisas que n\u00e3o mudam. Pode ser resolvido incluindo axiomas de quadro. [1]</li> <li>Problema do quadro de representa\u00e7\u00e3o: Problema que ocorre devido ao crescimento exponencial do n\u00famero de axiomas de quadro. Em um mundo com m a\u00e7\u00f5es diferentes e n fluentes, o conjunto de axiomas de cuadro ser\u00e1 de tamanho O(mn). Pode ser resolvido incluindo axiomax do estado sucessor [1]</li> <li>Problema de quadro inferencial: Tentativa de reduzir o tempo necess\u00e1rio para projetar os resultados de um plano de t etapas de O(nt) para O(kt). Onde k \u00e9 o n\u00famero de fluentes afetados e n \u00e9 o n\u00famero total de fluentes. [1]</li> <li>Problema de qualifica\u00e7\u00e3o: Problema que consiste em tentar especificar todas as condi\u00e7\u00f5es que devem ser cumpridas para que as a\u00e7\u00f5es sejam executadas com sucesso. [1]</li> </ul>"},{"location":"references/","title":"Referencias","text":"<ul> <li>RUSSELL, S. J.; NORVIG, P. Artificial Intelligence : a Modern Approach. 4th. ed. London: Pearson, 2021. [1]</li> <li>Knowledge Based Agent in AI - Javatpoint. Dispon\u00edvel em: https://www.javatpoint.com/knowledge-based-agent-in-ai. [2]</li> <li>Knowledge based agents in AI. Dispon\u00edvel em: https://www.geeksforgeeks.org/knowledge-based-agents-in-ai/. [3]</li> <li>Rules of Inference | Definitions &amp; Examples | Engineering Mathematics. Dispon\u00edvel em: https://www.geeksforgeeks.org/rules-of-inference/. [4]</li> <li>Biconditional Elimination. Dispon\u00edvel em: http://intrologic.stanford.edu/dictionary/biconditional_elimination.html. Acesso em: 16 jan. 2025. [5]</li> <li>Biconditional Introduction and Biconditional Elimination - Game Theory 101. Dispon\u00edvel em: https://gametheory101.com/courses/logic-101/biconditional-introduction-and-biconditional-elimination/. Acesso em: 16 jan. 2025. [6]</li> <li>2.3: Equivalent Logical Statements. Dispon\u00edvel em: https://math.libretexts.org/Courses/Prince_Georges_Community_College/MAT_1130_Mathematical_Ideas_Mirtova_Jones_(PGCC%3A_Fall_2022)/02%3A_Logic/2.03%3A_Equivalent_Logical_Statements. [7]</li> <li>GEEKSFORGEEKS. De Morgan's Law: Set Theory, Boolean Algebra, Proof &amp; Formula. Dispon\u00edvel em: https://www.geeksforgeeks.org/de-morgans-law/. [8]</li> <li>GEEKSFORGEEKS. Propositional Logic based Agent. Dispon\u00edvel em: https://www.geeksforgeeks.org/propositional-logic-based-agent/. Acesso em: 16 jan. 2025. [9]</li> </ul>"}]}